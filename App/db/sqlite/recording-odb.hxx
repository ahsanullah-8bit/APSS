// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef RECORDING_ODB_HXX
#define RECORDING_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2050000 // 2.5.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/sqlite/qstring-traits.hxx>
#include <odb/qt/basic/sqlite/qbyte-array-traits.hxx>
#include <odb/qt/basic/sqlite/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/sqlite/qdate-traits.hxx>
#include <odb/qt/date-time/sqlite/qtime-traits.hxx>
#include <odb/qt/date-time/sqlite/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if ODB_VERSION != 20500UL
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "recording.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Recording
  //
  template <>
  struct class_traits< ::Recording >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Recording >
  {
    public:
    typedef ::Recording object_type;
    typedef ::QSharedPointer< ::Recording > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::QString id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Recording
  //
  template <typename A>
  struct query_columns< ::Recording, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    id_type_;

    static const id_type_ id;

    // camera
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    camera_type_;

    static const camera_type_ camera;

    // path
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    path_type_;

    static const path_type_ path;

    // startTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    startTime_type_;

    static const startTime_type_ startTime;

    // endTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    endTime_type_;

    static const endTime_type_ endTime;

    // duration
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    duration_type_;

    static const duration_type_ duration;

    // motion
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    motion_type_;

    static const motion_type_ motion;

    // objects
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    objects_type_;

    static const objects_type_ objects;

    // dBFS
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    dBFS_type_;

    static const dBFS_type_ dBFS;

    // segmentSize
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    segmentSize_type_;

    static const segmentSize_type_ segmentSize;

    // regions
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    regions_type_;

    static const regions_type_ regions;
  };

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::id_type_
  query_columns< ::Recording, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::camera_type_
  query_columns< ::Recording, id_sqlite, A >::
  camera (A::table_name, "\"camera\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::path_type_
  query_columns< ::Recording, id_sqlite, A >::
  path (A::table_name, "\"path\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::startTime_type_
  query_columns< ::Recording, id_sqlite, A >::
  startTime (A::table_name, "\"startTime\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::endTime_type_
  query_columns< ::Recording, id_sqlite, A >::
  endTime (A::table_name, "\"endTime\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::duration_type_
  query_columns< ::Recording, id_sqlite, A >::
  duration (A::table_name, "\"duration\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::motion_type_
  query_columns< ::Recording, id_sqlite, A >::
  motion (A::table_name, "\"motion\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::objects_type_
  query_columns< ::Recording, id_sqlite, A >::
  objects (A::table_name, "\"objects\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::dBFS_type_
  query_columns< ::Recording, id_sqlite, A >::
  dBFS (A::table_name, "\"dBFS\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::segmentSize_type_
  query_columns< ::Recording, id_sqlite, A >::
  segmentSize (A::table_name, "\"segmentSize\"", 0);

  template <typename A>
  const typename query_columns< ::Recording, id_sqlite, A >::regions_type_
  query_columns< ::Recording, id_sqlite, A >::
  regions (A::table_name, "\"regions\"", 0);

  template <typename A>
  struct pointer_query_columns< ::Recording, id_sqlite, A >:
    query_columns< ::Recording, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Recording, id_sqlite >:
    public access::object_traits< ::Recording >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // m_id
      //
      details::buffer m_id_value;
      std::size_t m_id_size;
      bool m_id_null;

      // m_camera
      //
      details::buffer m_camera_value;
      std::size_t m_camera_size;
      bool m_camera_null;

      // m_path
      //
      details::buffer m_path_value;
      std::size_t m_path_size;
      bool m_path_null;

      // m_startTime
      //
      details::buffer m_startTime_value;
      std::size_t m_startTime_size;
      bool m_startTime_null;

      // m_endTime
      //
      details::buffer m_endTime_value;
      std::size_t m_endTime_size;
      bool m_endTime_null;

      // m_duration
      //
      double m_duration_value;
      bool m_duration_null;

      // m_motion
      //
      long long m_motion_value;
      bool m_motion_null;

      // m_objects
      //
      long long m_objects_value;
      bool m_objects_null;

      // m_dBFS
      //
      long long m_dBFS_value;
      bool m_dBFS_null;

      // m_segmentSize
      //
      double m_segmentSize_value;
      bool m_segmentSize_null;

      // m_regions
      //
      long long m_regions_value;
      bool m_regions_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 11UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Recording, id_common >:
    public access::object_traits_impl< ::Recording, id_sqlite >
  {
  };

  // Recording
  //
}

#include "recording-odb.ixx"

#include <odb/post.hxx>

#endif // RECORDING_ODB_HXX
