// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "event-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // Event
  //

  struct access::object_traits_impl< ::Event, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::Event, id_sqlite >::id_type
  access::object_traits_impl< ::Event, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        id,
        i.m_id_value,
        i.m_id_size,
        i.m_id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Event, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // m_id
    //
    if (t[0UL])
    {
      i.m_id_value.capacity (i.m_id_size);
      grew = true;
    }

    // m_label
    //
    if (t[1UL])
    {
      i.m_label_value.capacity (i.m_label_size);
      grew = true;
    }

    // m_subLabel
    //
    if (t[2UL])
    {
      i.m_subLabel_value.capacity (i.m_subLabel_size);
      grew = true;
    }

    // m_camera
    //
    if (t[3UL])
    {
      i.m_camera_value.capacity (i.m_camera_size);
      grew = true;
    }

    // m_startTime
    //
    if (t[4UL])
    {
      i.m_startTime_value.capacity (i.m_startTime_size);
      grew = true;
    }

    // m_endTime
    //
    if (t[5UL])
    {
      i.m_endTime_value.capacity (i.m_endTime_size);
      grew = true;
    }

    // m_topScore
    //
    t[6UL] = false;

    // m_score
    //
    t[7UL] = false;

    // m_falsePositive
    //
    t[8UL] = false;

    // m_zones
    //
    if (t[9UL])
    {
      i.m_zones_value.capacity (i.m_zones_size);
      grew = true;
    }

    // m_thumbnail
    //
    if (t[10UL])
    {
      i.m_thumbnail_value.capacity (i.m_thumbnail_size);
      grew = true;
    }

    // m_hasClip
    //
    t[11UL] = false;

    // m_hasSnapshot
    //
    t[12UL] = false;

    // m_region
    //
    if (t[13UL])
    {
      i.m_region_value.capacity (i.m_region_size);
      grew = true;
    }

    // m_box
    //
    if (t[14UL])
    {
      i.m_box_value.capacity (i.m_box_size);
      grew = true;
    }

    // m_area
    //
    t[15UL] = false;

    // m_retainIndefinitely
    //
    t[16UL] = false;

    // m_ratio
    //
    t[17UL] = false;

    // m_plusId
    //
    if (t[18UL])
    {
      i.m_plusId_value.capacity (i.m_plusId_size);
      grew = true;
    }

    // m_modelHash
    //
    if (t[19UL])
    {
      i.m_modelHash_value.capacity (i.m_modelHash_size);
      grew = true;
    }

    // m_detectorType
    //
    if (t[20UL])
    {
      i.m_detectorType_value.capacity (i.m_detectorType_size);
      grew = true;
    }

    // m_modelType
    //
    if (t[21UL])
    {
      i.m_modelType_value.capacity (i.m_modelType_size);
      grew = true;
    }

    // m_data
    //
    if (t[22UL])
    {
      i.m_data_value.capacity (i.m_data_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::Event, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // m_id
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::QString,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.m_id_value.data ();
      b[n].size = &i.m_id_size;
      b[n].capacity = i.m_id_value.capacity ();
      b[n].is_null = &i.m_id_null;
      n++;
    }

    // m_label
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_label_value.data ();
    b[n].size = &i.m_label_size;
    b[n].capacity = i.m_label_value.capacity ();
    b[n].is_null = &i.m_label_null;
    n++;

    // m_subLabel
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_subLabel_value.data ();
    b[n].size = &i.m_subLabel_size;
    b[n].capacity = i.m_subLabel_value.capacity ();
    b[n].is_null = &i.m_subLabel_null;
    n++;

    // m_camera
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_camera_value.data ();
    b[n].size = &i.m_camera_size;
    b[n].capacity = i.m_camera_value.capacity ();
    b[n].is_null = &i.m_camera_null;
    n++;

    // m_startTime
    //
    b[n].type = sqlite::image_traits<
      ::QDateTime,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_startTime_value.data ();
    b[n].size = &i.m_startTime_size;
    b[n].capacity = i.m_startTime_value.capacity ();
    b[n].is_null = &i.m_startTime_null;
    n++;

    // m_endTime
    //
    b[n].type = sqlite::image_traits<
      ::QDateTime,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_endTime_value.data ();
    b[n].size = &i.m_endTime_size;
    b[n].capacity = i.m_endTime_value.capacity ();
    b[n].is_null = &i.m_endTime_null;
    n++;

    // m_topScore
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.m_topScore_value;
    b[n].is_null = &i.m_topScore_null;
    n++;

    // m_score
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.m_score_value;
    b[n].is_null = &i.m_score_null;
    n++;

    // m_falsePositive
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.m_falsePositive_value;
    b[n].is_null = &i.m_falsePositive_null;
    n++;

    // m_zones
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_zones_value.data ();
    b[n].size = &i.m_zones_size;
    b[n].capacity = i.m_zones_value.capacity ();
    b[n].is_null = &i.m_zones_null;
    n++;

    // m_thumbnail
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_thumbnail_value.data ();
    b[n].size = &i.m_thumbnail_size;
    b[n].capacity = i.m_thumbnail_value.capacity ();
    b[n].is_null = &i.m_thumbnail_null;
    n++;

    // m_hasClip
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.m_hasClip_value;
    b[n].is_null = &i.m_hasClip_null;
    n++;

    // m_hasSnapshot
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.m_hasSnapshot_value;
    b[n].is_null = &i.m_hasSnapshot_null;
    n++;

    // m_region
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_region_value.data ();
    b[n].size = &i.m_region_size;
    b[n].capacity = i.m_region_value.capacity ();
    b[n].is_null = &i.m_region_null;
    n++;

    // m_box
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_box_value.data ();
    b[n].size = &i.m_box_size;
    b[n].capacity = i.m_box_value.capacity ();
    b[n].is_null = &i.m_box_null;
    n++;

    // m_area
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.m_area_value;
    b[n].is_null = &i.m_area_null;
    n++;

    // m_retainIndefinitely
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.m_retainIndefinitely_value;
    b[n].is_null = &i.m_retainIndefinitely_null;
    n++;

    // m_ratio
    //
    b[n].type = sqlite::bind::real;
    b[n].buffer = &i.m_ratio_value;
    b[n].is_null = &i.m_ratio_null;
    n++;

    // m_plusId
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_plusId_value.data ();
    b[n].size = &i.m_plusId_size;
    b[n].capacity = i.m_plusId_value.capacity ();
    b[n].is_null = &i.m_plusId_null;
    n++;

    // m_modelHash
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_modelHash_value.data ();
    b[n].size = &i.m_modelHash_size;
    b[n].capacity = i.m_modelHash_value.capacity ();
    b[n].is_null = &i.m_modelHash_null;
    n++;

    // m_detectorType
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_detectorType_value.data ();
    b[n].size = &i.m_detectorType_size;
    b[n].capacity = i.m_detectorType_value.capacity ();
    b[n].is_null = &i.m_detectorType_null;
    n++;

    // m_modelType
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_modelType_value.data ();
    b[n].size = &i.m_modelType_size;
    b[n].capacity = i.m_modelType_value.capacity ();
    b[n].is_null = &i.m_modelType_null;
    n++;

    // m_data
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.m_data_value.data ();
    b[n].size = &i.m_data_size;
    b[n].capacity = i.m_data_value.capacity ();
    b[n].is_null = &i.m_data_null;
    n++;
  }

  void access::object_traits_impl< ::Event, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.id_value.data ();
    b[n].size = &i.id_size;
    b[n].capacity = i.id_value.capacity ();
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Event, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // m_id
    //
    if (sk == statement_insert)
    {
      ::QString const& v =
        o.id ();

      bool is_null (false);
      std::size_t cap (i.m_id_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_id_value,
        i.m_id_size,
        is_null,
        v);
      i.m_id_null = is_null;
      grew = grew || (cap != i.m_id_value.capacity ());
    }

    // m_label
    //
    {
      ::QString const& v =
        o.label ();

      bool is_null (true);
      std::size_t cap (i.m_label_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_label_value,
        i.m_label_size,
        is_null,
        v);
      i.m_label_null = is_null;
      grew = grew || (cap != i.m_label_value.capacity ());
    }

    // m_subLabel
    //
    {
      ::QString const& v =
        o.subLabel ();

      bool is_null (true);
      std::size_t cap (i.m_subLabel_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_subLabel_value,
        i.m_subLabel_size,
        is_null,
        v);
      i.m_subLabel_null = is_null;
      grew = grew || (cap != i.m_subLabel_value.capacity ());
    }

    // m_camera
    //
    {
      ::QString const& v =
        o.camera ();

      bool is_null (true);
      std::size_t cap (i.m_camera_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_camera_value,
        i.m_camera_size,
        is_null,
        v);
      i.m_camera_null = is_null;
      grew = grew || (cap != i.m_camera_value.capacity ());
    }

    // m_startTime
    //
    {
      ::QDateTime const& v =
        o.startTime ();

      bool is_null (true);
      std::size_t cap (i.m_startTime_value.capacity ());
      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_image (
        i.m_startTime_value,
        i.m_startTime_size,
        is_null,
        v);
      i.m_startTime_null = is_null;
      grew = grew || (cap != i.m_startTime_value.capacity ());
    }

    // m_endTime
    //
    {
      ::QDateTime const& v =
        o.endTime ();

      bool is_null (true);
      std::size_t cap (i.m_endTime_value.capacity ());
      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_image (
        i.m_endTime_value,
        i.m_endTime_size,
        is_null,
        v);
      i.m_endTime_null = is_null;
      grew = grew || (cap != i.m_endTime_value.capacity ());
    }

    // m_topScore
    //
    {
      float const& v =
        o.topScore ();

      bool is_null (true);
      sqlite::value_traits<
          float,
          sqlite::id_real >::set_image (
        i.m_topScore_value,
        is_null,
        v);
      i.m_topScore_null = is_null;
    }

    // m_score
    //
    {
      float const& v =
        o.score ();

      bool is_null (true);
      sqlite::value_traits<
          float,
          sqlite::id_real >::set_image (
        i.m_score_value,
        is_null,
        v);
      i.m_score_null = is_null;
    }

    // m_falsePositive
    //
    {
      bool const& v =
        o.falsePositive ();

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.m_falsePositive_value,
        is_null,
        v);
      i.m_falsePositive_null = is_null;
    }

    // m_zones
    //
    {
      ::QString const& v =
        o.zones ();

      bool is_null (true);
      std::size_t cap (i.m_zones_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_zones_value,
        i.m_zones_size,
        is_null,
        v);
      i.m_zones_null = is_null;
      grew = grew || (cap != i.m_zones_value.capacity ());
    }

    // m_thumbnail
    //
    {
      ::QString const& v =
        o.thumbnail ();

      bool is_null (true);
      std::size_t cap (i.m_thumbnail_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_thumbnail_value,
        i.m_thumbnail_size,
        is_null,
        v);
      i.m_thumbnail_null = is_null;
      grew = grew || (cap != i.m_thumbnail_value.capacity ());
    }

    // m_hasClip
    //
    {
      bool const& v =
        o.hasClip ();

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.m_hasClip_value,
        is_null,
        v);
      i.m_hasClip_null = is_null;
    }

    // m_hasSnapshot
    //
    {
      bool const& v =
        o.hasSnapshot ();

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.m_hasSnapshot_value,
        is_null,
        v);
      i.m_hasSnapshot_null = is_null;
    }

    // m_region
    //
    {
      ::QString const& v =
        o.region ();

      bool is_null (true);
      std::size_t cap (i.m_region_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_region_value,
        i.m_region_size,
        is_null,
        v);
      i.m_region_null = is_null;
      grew = grew || (cap != i.m_region_value.capacity ());
    }

    // m_box
    //
    {
      ::QString const& v =
        o.box ();

      bool is_null (true);
      std::size_t cap (i.m_box_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_box_value,
        i.m_box_size,
        is_null,
        v);
      i.m_box_null = is_null;
      grew = grew || (cap != i.m_box_value.capacity ());
    }

    // m_area
    //
    {
      long int const& v =
        o.area ();

      bool is_null (false);
      sqlite::value_traits<
          long int,
          sqlite::id_integer >::set_image (
        i.m_area_value,
        is_null,
        v);
      i.m_area_null = is_null;
    }

    // m_retainIndefinitely
    //
    {
      bool const& v =
        o.retainIndefinitely ();

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.m_retainIndefinitely_value,
        is_null,
        v);
      i.m_retainIndefinitely_null = is_null;
    }

    // m_ratio
    //
    {
      float const& v =
        o.ratio ();

      bool is_null (true);
      sqlite::value_traits<
          float,
          sqlite::id_real >::set_image (
        i.m_ratio_value,
        is_null,
        v);
      i.m_ratio_null = is_null;
    }

    // m_plusId
    //
    {
      ::QString const& v =
        o.plusId ();

      bool is_null (true);
      std::size_t cap (i.m_plusId_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_plusId_value,
        i.m_plusId_size,
        is_null,
        v);
      i.m_plusId_null = is_null;
      grew = grew || (cap != i.m_plusId_value.capacity ());
    }

    // m_modelHash
    //
    {
      ::QString const& v =
        o.modelHash ();

      bool is_null (true);
      std::size_t cap (i.m_modelHash_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_modelHash_value,
        i.m_modelHash_size,
        is_null,
        v);
      i.m_modelHash_null = is_null;
      grew = grew || (cap != i.m_modelHash_value.capacity ());
    }

    // m_detectorType
    //
    {
      ::QString const& v =
        o.detectorType ();

      bool is_null (true);
      std::size_t cap (i.m_detectorType_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_detectorType_value,
        i.m_detectorType_size,
        is_null,
        v);
      i.m_detectorType_null = is_null;
      grew = grew || (cap != i.m_detectorType_value.capacity ());
    }

    // m_modelType
    //
    {
      ::QString const& v =
        o.modelType ();

      bool is_null (true);
      std::size_t cap (i.m_modelType_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_modelType_value,
        i.m_modelType_size,
        is_null,
        v);
      i.m_modelType_null = is_null;
      grew = grew || (cap != i.m_modelType_value.capacity ());
    }

    // m_data
    //
    {
      ::QString const& v =
        o.data ();

      bool is_null (true);
      std::size_t cap (i.m_data_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.m_data_value,
        i.m_data_size,
        is_null,
        v);
      i.m_data_null = is_null;
      grew = grew || (cap != i.m_data_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::Event, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // m_id
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_id_value,
        i.m_id_size,
        i.m_id_null);

      o.setId (v);
    }

    // m_label
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_label_value,
        i.m_label_size,
        i.m_label_null);

      o.setLabel (v);
    }

    // m_subLabel
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_subLabel_value,
        i.m_subLabel_size,
        i.m_subLabel_null);

      o.setSubLabel (v);
    }

    // m_camera
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_camera_value,
        i.m_camera_size,
        i.m_camera_null);

      o.setCamera (v);
    }

    // m_startTime
    //
    {
      ::QDateTime v;

      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_value (
        v,
        i.m_startTime_value,
        i.m_startTime_size,
        i.m_startTime_null);

      o.setStartTime (v);
    }

    // m_endTime
    //
    {
      ::QDateTime v;

      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_value (
        v,
        i.m_endTime_value,
        i.m_endTime_size,
        i.m_endTime_null);

      o.setEndTime (v);
    }

    // m_topScore
    //
    {
      float v;

      sqlite::value_traits<
          float,
          sqlite::id_real >::set_value (
        v,
        i.m_topScore_value,
        i.m_topScore_null);

      o.setTopScore (v);
    }

    // m_score
    //
    {
      float v;

      sqlite::value_traits<
          float,
          sqlite::id_real >::set_value (
        v,
        i.m_score_value,
        i.m_score_null);

      o.setScore (v);
    }

    // m_falsePositive
    //
    {
      bool v;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.m_falsePositive_value,
        i.m_falsePositive_null);

      o.setFalsePositive (v);
    }

    // m_zones
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_zones_value,
        i.m_zones_size,
        i.m_zones_null);

      o.setZones (v);
    }

    // m_thumbnail
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_thumbnail_value,
        i.m_thumbnail_size,
        i.m_thumbnail_null);

      o.setThumbnail (v);
    }

    // m_hasClip
    //
    {
      bool v;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.m_hasClip_value,
        i.m_hasClip_null);

      o.setHasClip (v);
    }

    // m_hasSnapshot
    //
    {
      bool v;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.m_hasSnapshot_value,
        i.m_hasSnapshot_null);

      o.setHasSnapshot (v);
    }

    // m_region
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_region_value,
        i.m_region_size,
        i.m_region_null);

      o.setRegion (v);
    }

    // m_box
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_box_value,
        i.m_box_size,
        i.m_box_null);

      o.setBox (v);
    }

    // m_area
    //
    {
      long int v;

      sqlite::value_traits<
          long int,
          sqlite::id_integer >::set_value (
        v,
        i.m_area_value,
        i.m_area_null);

      o.setArea (v);
    }

    // m_retainIndefinitely
    //
    {
      bool v;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.m_retainIndefinitely_value,
        i.m_retainIndefinitely_null);

      o.setRetainIndefinitely (v);
    }

    // m_ratio
    //
    {
      float v;

      sqlite::value_traits<
          float,
          sqlite::id_real >::set_value (
        v,
        i.m_ratio_value,
        i.m_ratio_null);

      o.setRatio (v);
    }

    // m_plusId
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_plusId_value,
        i.m_plusId_size,
        i.m_plusId_null);

      o.setPlusId (v);
    }

    // m_modelHash
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_modelHash_value,
        i.m_modelHash_size,
        i.m_modelHash_null);

      o.setModelHash (v);
    }

    // m_detectorType
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_detectorType_value,
        i.m_detectorType_size,
        i.m_detectorType_null);

      o.setDetectorType (v);
    }

    // m_modelType
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_modelType_value,
        i.m_modelType_size,
        i.m_modelType_null);

      o.setModelType (v);
    }

    // m_data
    //
    {
      ::QString v;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.m_data_value,
        i.m_data_size,
        i.m_data_null);

      o.setData (v);
    }
  }

  void access::object_traits_impl< ::Event, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t cap (i.id_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.id_value,
        i.id_size,
        is_null,
        id);
      i.id_null = is_null;
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::Event, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Event\" "
  "(\"id\", "
  "\"label\", "
  "\"subLabel\", "
  "\"camera\", "
  "\"startTime\", "
  "\"endTime\", "
  "\"topScore\", "
  "\"score\", "
  "\"falsePositive\", "
  "\"zones\", "
  "\"thumbnail\", "
  "\"hasClip\", "
  "\"hasSnapshot\", "
  "\"region\", "
  "\"box\", "
  "\"area\", "
  "\"retainIndefinitely\", "
  "\"ratio\", "
  "\"plusId\", "
  "\"modelHash\", "
  "\"detectorType\", "
  "\"modelType\", "
  "\"data\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::Event, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Event\".\"id\", "
  "\"Event\".\"label\", "
  "\"Event\".\"subLabel\", "
  "\"Event\".\"camera\", "
  "\"Event\".\"startTime\", "
  "\"Event\".\"endTime\", "
  "\"Event\".\"topScore\", "
  "\"Event\".\"score\", "
  "\"Event\".\"falsePositive\", "
  "\"Event\".\"zones\", "
  "\"Event\".\"thumbnail\", "
  "\"Event\".\"hasClip\", "
  "\"Event\".\"hasSnapshot\", "
  "\"Event\".\"region\", "
  "\"Event\".\"box\", "
  "\"Event\".\"area\", "
  "\"Event\".\"retainIndefinitely\", "
  "\"Event\".\"ratio\", "
  "\"Event\".\"plusId\", "
  "\"Event\".\"modelHash\", "
  "\"Event\".\"detectorType\", "
  "\"Event\".\"modelType\", "
  "\"Event\".\"data\" "
  "FROM \"Event\" "
  "WHERE \"Event\".\"id\"=?";

  const char access::object_traits_impl< ::Event, id_sqlite >::update_statement[] =
  "UPDATE \"Event\" "
  "SET "
  "\"label\"=?, "
  "\"subLabel\"=?, "
  "\"camera\"=?, "
  "\"startTime\"=?, "
  "\"endTime\"=?, "
  "\"topScore\"=?, "
  "\"score\"=?, "
  "\"falsePositive\"=?, "
  "\"zones\"=?, "
  "\"thumbnail\"=?, "
  "\"hasClip\"=?, "
  "\"hasSnapshot\"=?, "
  "\"region\"=?, "
  "\"box\"=?, "
  "\"area\"=?, "
  "\"retainIndefinitely\"=?, "
  "\"ratio\"=?, "
  "\"plusId\"=?, "
  "\"modelHash\"=?, "
  "\"detectorType\"=?, "
  "\"modelType\"=?, "
  "\"data\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::Event, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Event\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::Event, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Event\".\"id\", "
  "\"Event\".\"label\", "
  "\"Event\".\"subLabel\", "
  "\"Event\".\"camera\", "
  "\"Event\".\"startTime\", "
  "\"Event\".\"endTime\", "
  "\"Event\".\"topScore\", "
  "\"Event\".\"score\", "
  "\"Event\".\"falsePositive\", "
  "\"Event\".\"zones\", "
  "\"Event\".\"thumbnail\", "
  "\"Event\".\"hasClip\", "
  "\"Event\".\"hasSnapshot\", "
  "\"Event\".\"region\", "
  "\"Event\".\"box\", "
  "\"Event\".\"area\", "
  "\"Event\".\"retainIndefinitely\", "
  "\"Event\".\"ratio\", "
  "\"Event\".\"plusId\", "
  "\"Event\".\"modelHash\", "
  "\"Event\".\"detectorType\", "
  "\"Event\".\"modelType\", "
  "\"Event\".\"data\" "
  "FROM \"Event\"";

  const char access::object_traits_impl< ::Event, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Event\"";

  const char access::object_traits_impl< ::Event, id_sqlite >::table_name[] =
  "\"Event\"";

  void access::object_traits_impl< ::Event, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Event, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Event, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Event, id_sqlite >::pointer_type
  access::object_traits_impl< ::Event, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Event, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Event, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Event, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::Event, id_sqlite >::object_type >
  access::object_traits_impl< ::Event, id_sqlite >::
  query (database& db, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Event, id_sqlite >::
  erase_query (database& db, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection (db));

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
